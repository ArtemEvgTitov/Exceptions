package Seminar_1;

public class Sem1 {

    // Реализуйте метод, принимающий в качестве аргумента целочисленный массив.
    // Если длина массива меньше некоторого заданного минимума, метод возвращает -1,
    // в качестве кода ошибки, иначе - длину массива.

    public static int ShowArray(int[] arr) {
        if (arr == null || arr.length < 1) {
            return -1;
        }
        return arr.length;
    }

    // Реализуйте метод, принимающий в качестве аргумента целочисленный массив и
    // некоторое значение.
    // Метод ищет в массиве заданное значение и возвращает его индекс. При этом,
    // например:
    // если длина массива меньше некоторого заданного минимума, метод возвращает -1,
    // в качестве кода ошибки.
    // если искомый элемент не найден, метод вернет -2 в качестве кода ошибки.
    // если вместо массива пришел null, метод вернет -3
    // придумайте свои варианты исключительных ситуаций и верните соответствующие
    // коды ошибок.
    // Напишите метод, в котором реализуйте взаимодействие с пользователем.
    // То есть, этот метод запросит искомое число у пользователя, вызовет первый,
    // обработает возвращенное значение и покажет читаемый результат пользователю.
    // Например, если вернулся -2, пользователю выведется сообщение: “Искомый
    // элемент не найден”.

    public static int findElementIndex(int[] arr, int element, int minLength) {
        if (arr == null) {
            return -3;
        }
        if (arr.length < minLength) {
            return -1;
        }
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == element) {
                return i;
            }
        }
        return -2;
    }

    // Реализуйте метод, принимающий в качестве аргумента целочисленный двумерный
    // массив.
    // Необходимо посчитать и вернуть сумму элементов этого массива.
    // При этом накладываем на метод 2 ограничения:
    // метод может работать только с квадратными массивами (кол-во строк = кол-ву
    // столбцов),
    // и в каждой ячейке может лежать только значение 0 или 1.
    // Если нарушается одно из условий, метод должен бросить RuntimeException с
    // сообщением об ошибке.

    public static int GetSummaryElementsInArray(int[][] arr) {
        if (arr == null || arr[0].length != arr[1].length)
            throw new RuntimeException("Unvalid array");
        int sum = 0;
        for (int[] ar : arr) {
            for (int n : ar) {
                if (n == 0 || n == 1) {
                    sum = sum + n;
                } else {
                    throw new RuntimeException("Unvalid data into array");
                }
            }
        }
        return sum;
    }

    // Реализуйте метод, принимающий в качестве аргументов два целочисленных
    // массива,
    // и возвращающий новый массив, каждый элемент которого равен сумме элементов
    // двух входящих массивов в той же ячейке.
    // Если длины массивов не равны, необходимо как-то оповестить пользователя.
    
    public static int[] GetNewArr(int[] arr1, int[] arr2) {
        if (arr1 == null || arr2 == null || arr1.length != arr2.length) {
            throw new RuntimeException("Unvalid arrays");
        }
        int[] arr = new int[arr1.length];
        for (int i = 0; i < arr1.length; i++) {
            arr[i] = arr1[i] + arr2[i];
        }
        return arr;
    }
}
